//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockExchange.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StockExchangeEntities : DbContext
    {
        public StockExchangeEntities()
            : base("name=StockExchangeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BuyingSelling> BuyingSelling { get; set; }
        public virtual DbSet<MarketSquare> MarketSquare { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
        public virtual DbSet<StockName> StockName { get; set; }
        public virtual DbSet<UserTable> UserTable { get; set; }
        public virtual DbSet<Wallet> Wallet { get; set; }
    
        public virtual int pBuyStock(string stockName, Nullable<int> user_id, Nullable<int> stockCountBuy, Nullable<int> mark_id)
        {
            var stockNameParameter = stockName != null ?
                new ObjectParameter("stockName", stockName) :
                new ObjectParameter("stockName", typeof(string));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var stockCountBuyParameter = stockCountBuy.HasValue ?
                new ObjectParameter("stockCountBuy", stockCountBuy) :
                new ObjectParameter("stockCountBuy", typeof(int));
    
            var mark_idParameter = mark_id.HasValue ?
                new ObjectParameter("mark_id", mark_id) :
                new ObjectParameter("mark_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pBuyStock", stockNameParameter, user_idParameter, stockCountBuyParameter, mark_idParameter);
        }
    
        public virtual int pCreateBuyTransaction(Nullable<int> user_id, Nullable<int> numberBuyStock, string stock_name)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var numberBuyStockParameter = numberBuyStock.HasValue ?
                new ObjectParameter("numberBuyStock", numberBuyStock) :
                new ObjectParameter("numberBuyStock", typeof(int));
    
            var stock_nameParameter = stock_name != null ?
                new ObjectParameter("stock_name", stock_name) :
                new ObjectParameter("stock_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pCreateBuyTransaction", user_idParameter, numberBuyStockParameter, stock_nameParameter);
        }
    
        public virtual int pCreateSellTransaction(Nullable<int> user_id, Nullable<int> numberSellStock, string stock_name)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var numberSellStockParameter = numberSellStock.HasValue ?
                new ObjectParameter("numberSellStock", numberSellStock) :
                new ObjectParameter("numberSellStock", typeof(int));
    
            var stock_nameParameter = stock_name != null ?
                new ObjectParameter("stock_name", stock_name) :
                new ObjectParameter("stock_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pCreateSellTransaction", user_idParameter, numberSellStockParameter, stock_nameParameter);
        }
    
        public virtual int pStockEmission(Nullable<int> id_stock, Nullable<int> setNumberStocks, Nullable<decimal> setStockPrice)
        {
            var id_stockParameter = id_stock.HasValue ?
                new ObjectParameter("id_stock", id_stock) :
                new ObjectParameter("id_stock", typeof(int));
    
            var setNumberStocksParameter = setNumberStocks.HasValue ?
                new ObjectParameter("setNumberStocks", setNumberStocks) :
                new ObjectParameter("setNumberStocks", typeof(int));
    
            var setStockPriceParameter = setStockPrice.HasValue ?
                new ObjectParameter("setStockPrice", setStockPrice) :
                new ObjectParameter("setStockPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pStockEmission", id_stockParameter, setNumberStocksParameter, setStockPriceParameter);
        }
    }
}
